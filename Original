A Relational Model of Data for 
Large Shared Data Banks 
E F. CODD 
IBM Research Laboratory, San Jose, Cafornia 
Future users of arge data banks must be protected from 
havng to know how the data s organized n the machne (the 
nterna representation). A prompting service which supples 
such information is not a satsfactory souton. Actvtes of users 
at terminas and most appicaton programs shoud reman 
unaffected when the nterna representation of data is changed 
and even when some aspects of the externa representaton 
are changed Changes n data representaton wl often be 
needed as a result of changes n query, update and report 
traffic and natural growth n the types of stored nformaton. 
Existng noninferentia, formatted data systems provide users 
wth tree-structured fles or sghtly more general network 
modes of the data. In Section 1 inadequaces of these modes 
are dscussed. A mode based on n-ary reations a norma 
form for data base relations, and the concept of a unversal 
data sublanguage are introduced. n Section 2 certan opera
tions on reatons (other than ogica inference) are dscussed 
and apped to the probems of redundancy and consistency 
n the user’s model. 
KEY WORDS AND PHRASES: data bank data base data structure data 
organzaton, herarches of data, networks of data reations, derivabty 
redundancy consstency composition, join retreval language predcate 
calcuus, security data ntegrity 
CR CATEGORIES 370, 373, 375 420 422, 429 
1. Relatona Model and Normal Form 
1 .I. INTR~xJ~TI~N 
This paper is concerned with the application of ele
mentary relation theory to systems which provide shared 
access to large banks of formatted data. Except for a paper 
by Childs [], the principa application of relations to data 
systems has been to deductive question-answering systems. 
Levein and Maron [2] provide numerous references to work 
in this area. 
In contrast, the problems treated here are those of data 
independence-the independence of application programs 
and terminal actvites from growth in data types and 
changes in data representation-and certain kinds of data 
inconsistency which are expected to become troublesome 
even in nondeductive systems. 
Section 1 appears to be superior in several respects to the 
graph or network model [3,4] presently in vogue for non
inferential systems. It provides a means of descrbing data 
with its natural structure ony-that is, without superim
posing any additional structure for machine representation 
purposes. Accordingly, it provides a basis for a high level 
data language which will yed maxmal independence be
tween programs on the one hand and machne representa
tion and organization of data on the other. 
A further advantage of the relational view is that it 
forms a sound basis for treating derivabilty, redundancy, 
and consistency of relations-these are discussed in Section 
2. The network mode, on the other hand, has spawned a 
number of confusions, not the least of which is mistaking 
the derivation of connections for the derivation of rela
tions (see remarks in Section 2 on the “connection trap”). 
Finally, the reational view permts a cearer evaluation 
of the scope and logical limitations of present formatted 
data systems, and also the reative merits (from a logica 
standpoint) of competng representatons of data within a 
snge system. Examples of this clearer perspective are 
cited in varous parts of this paper. Implementations of 
systems to support the relationa mode are not discussed. 
1.2. DATA DEPENDENCIES IN PRESENT SYSTEMS 
The provision of data description tables in recently de
veloped information systems represents a major advance 
toward the goal of data independence [5,6,7]. Such tables 
facilitate changing certain characteristics of the data repre
sentation stored in a data bank. However, the variety of 
data representation characteristics which can be changed 
without logically impairng some application programs is 
stil quite limited. Further, the model of data with which 
users interact is stil cluttered with representational prop
ertes, particularly in regard to the representation of col
lections of data (as opposed to individual items). Three of 
the principal kinds of data dependencies which stll need 
to be removed are: ordering dependence, indexing depend
ence, and access path dependence. In some systems these 
dependencies are not clearly separable from one another. 
1.2.1. Orderng Dependence. Eements of data in a 
data bank may be stored in a varety of ways, some involv
ing no concern for ordering, some permitting each element 
to particpate in one ordering only, others permitting each 
element to participate in several orderings. Let us consider 
those existing systems which ether require or permt data 
elements to be stored in at least one total ordering which is 
cosely associated with the hardware-determined ordering 
of addresses. For example, the records of a file concerning 
parts might be stored in ascending order by part serial 
number. Such systems normay permit applicaton pro
grams to assume that the order of presentation of records 
from such a file is identical to (or is a subordering of) the 
Communcations of the ACM 377 
Voume 13 / Number 6 / June, 1970
stored ordering. Those application programs whch take 
Structure 1. Projects Subordnate to Parts 
advantage of the stored orderng of a fe are likely to fail 
to operate correctly if for some reason it becomes necessary 
to replace that orderng by a different one. Simiar remarks 
hod for a stored ordering impemented by means of 
pointers 
It s unnecessary to single out any system as an exampe, 
because all the well-known nformation systems that are 
marketed today fail to make a cear distinction between 
order of presentaton on the one hand and stored ordering 
on the other. Significant mplementaton problems must be 
solved to provde this knd of ndependence. 
1.2.2. Indexing Dependence. In the context of for
matted data, an ndex is usualy thought of as a purely 
performance-oriented component of the data representa
tion. It tends to improve response to queries and updates 
and, at the same tme, slow down response to nsertons 
and deetions. From an informatonal standpont, an ndex 
is a redundant component of the data representaton. If a 
system uses indces at all and f it is to perform wel in an 
envronment wth changing patterns of activty on the data 
bank, an abilty to create and destroy ndices from tme to 
time will probaby be necessary The question then arses: 
Can application programs and terminal activities remain 
invariant as ndices come and go? 
Present formatted data systems take widely dfferent 
approaches to indexng. TDMS [7] unconditionaly pro
vides indexng on all attributes. The presently released 
verson of IMS [5] provides the user with a choce for each 
file: a choice between no indexing at all (the hierarchic se
quential organizaton) or ndexng on the prmary key 
only (the hierarchic ndexed sequent,ia organization). In 
neither case s the user’s applcaton ogc dependent on the 
existence of the unconditionaly provided indces. IDS 
[8], however, permts the fle designers to select attrbutes 
to be indexed and to incorporate ndices into the file struc
ture by means of additona chains Application programs 
taking advantage of the performance benefit of these in
dexing chains must refer to those chains by name. Such pro
grams do not operate correctly if these chains are later 
removed. 
1.2.3. Access Path Dependence. Many of the exstng 
formatted data systems provide users with tree-structured 
fles or sightly more general network modes of the data. 
Applicaton programs developed to work with these sys
tems tend to be ogicay impaired if the trees or networks 
are changed n structure. A smpe exampe follows. 
Suppose the data bank contans nformation about parts 
and projects. For each part the part number, part name, 
part descrption, quantity-on-hand, and quantity-on-order 
are recorded. For each project, the project number, project 
name, project descrption are recorded Whenever a project 
makes use of a certan part, the quantity of that part com
mitted to the gven project is also recorded. Suppose that 
the system requires the user or file designer to decare or 
define the data n terms of tree structures. Then any one 
of the hierarchcal structures may be adopted for the nfor
mation mentioned above (see Structures -5). 
Fie Segment Fieds 
F PART part # 
part name 
part descripton 
quantityonhand 
quantity-on-order 
PROJECT project # 
project name 
project descrption 
quantity committed 
Structure 2. Parts Subordinate to Projects 
Fle Sqmeut Fieds 
F PROJECT project # 
project name 
project descrption 
PART part # 
part name 
part descrption 
quantty-on-hand 
quanttyonorder 
quantity committed 
Structure 3. Parts and Projects as Peers 
Commtment Relationshp Subordnate to Projects 
Fle Segment Fieds 
F PART part # 
part name 
part descripton 
quantty-on-hand 
quanttyonorder 
G PROJECT project # 
project name 
project descrption 
PART part # 
quantty committed 
Structure 4. Parts and Projects as Peers 
Commtment Relationshp Subordinate to Parts 
Fle Segnren1 Fieds 
F PART part # 
part descrption 
quantty-on-hand 
quanttyonorder 
PROJECT project # 
quantty committed 
G PROJECT project # 
project name 
project description 
Structure 5 Parts, Projects, and 
Commtment Relatonship as Peers 
FCZC .%&ZCt Fcds 
F PART part # 
part name 
part description 
quantity-on-hand 
quantityonorder 
G PROJECT project # 
project name 
project descripton 
H COMMIT part # 
project # 
quantty committed 
Voume 13 / Number 6 / June 1970 
378 Communcations of the ACM 
ray which represents an n-ary relation R has the following 
number, part name, and quantty committed for every part 
used n the project whose project name is “alpha.” The 
followng observations may be made regardless of which 
avaabe tree-oriented information system is selected to 
tackle this problem. If a program P is developed for this 
probem assuming one of the fve structures above-that 
s, P makes no test to determine which structure is in ef
fect-then P wil fa on at least three of the remainng 
structures. More specifically, if P succeeds with structure 5, 
t will fa wth all the others; f P succeeds with structure 3 
or 4, it wll fail wth at least 1,2, and 5; if P succeeds with 
1 or 2, t wil fail with at least 3, 4, and 5. The reason s 
smpe in each case. In the absence of a test to determne 
which structure s in effect, P fails because an attempt s 
made to exceute a reference to a nonexistent fe (available 
systems treat this as an error) or no attempt is made to 
execute a reference to a fe containing needed informaton. 
The reader who s not convinced shoud develop sampe 
programs for this smpe problem. 
Since, n genera, it s not practical to deveop applica
tion programs which test for all tree structurngs permitted 
by the system, these programs fail when a change in 
&ructure becomes necessary. 
Systems whch provide users wth a network mode of 
the data run into simiar difficuties. In both the tree and 
network cases, the user (or his program) s requred to 
exploit a collecton of user access paths to the data. It does 
not matter whether these paths are n cose correspondence 
with pointer-defined paths in the stored representaton-in 
IDS the correspondence is extremely simple, in TDMS t s 
just the opposte. The consequence, regardless of the stored 
representation, is that terminal actvtes and programs be
come dependent on the continued existence of the user 
access paths. 
One soution to this s to adopt the policy that once a 
user access path is defined it will not be made obsolete un
til all application programs usng that path have become 
obsoete Such a polcy is not practcal, because the number 
of access paths in the total model for the communty of 
users of a data bank woud eventualy become excessvely 
arge. 
1.3. A RELATIONAL VIEW OF DATA 
The term relation is used here in its accepted mathe
matical sense. Given sets X1 , S, , . . . , S, (not necessarily 
distinct), R is a reation on these n sets if it is a set of n
tuples each of which has its first element from S1, its 
second element from Sz , and so on.’ We shall refer to Si as 
the jth domain of R. As defined above, R is sad to have 
degree n. Relations of degree 1 are often caled unary, de
gree 2 binary, degree 3 ternary, and degree n n-ary. 
For expository reasons, we shall frequently make use of 
an array representation of reations, but it must be re
membered that this particular representation is not an es
sental part of the relational view being expounded. An ar
1 More concisely, R is a subset of the Cartesan product 81 X 
sz x ** x 87% 
properties : 
(1) Each row represents an n-tuple of R. 
(2) The ordering of rows is immaterial. 
(3) Al rows are distinct. 
(4) The orderng of columns is significant-it corre
sponds to the orderng S1, Sz , . . . , S, of the do
mains on which R is defined (see, however, remarks 
below on domain-ordered and domain-unordered 
relations ) . 
(5) The significance of each column is partially con
veyed by labeling it with the name of the corre
spondng domain. 
The example in Fgure 1 illustrates a relaton of degree 
4, called suppy, which reflects the shipments-in-progress 
of parts from specified suppiers to specified projects in 
specfied quantties. 
supply (supper part project quantty) 
1 2 5 17 
1 3 5 23 
2 3 7 9 
2 7 5 4 
4 1 1 12 
FIG. 1. A relaton of degree 4 
One might ask: If the columns are labeled by the name 
of corresponding domains, why should the ordering of col
umns matter? As the exampe in Figure 2 shows, two col
umns may have identca headngs (indicating identical 
domains) but possess distinct meanings with respect to the 
relation. The reation depcted is called component. It is a 
ternary relation, whose first two domains are called part 
and third domain is called quantity. The meaning of com
ponent (2, y, z) is that part x is an immediate component 
(or subassembly) of part y, and z units of part 5 are needed 
to assemble one unit of part y. It is a reation which plays 
a critical role in the parts explosion probem. 
component (part part quantity) 
1 5 9 
2 5 7 
3 5 2 
2 6 12 
3 6 3 
4 7 1 
6 7 1 
FG. 2 A relaton with-two dentical domains 
It is a remarkable fact that several existing information 
systems (chefly those based on treestructured files) fail 
to provide data representations for relations which have 
two or more identical domains. The present verson of 
IMS/360 [5] is an exampe of such a system. 
The totality of data in a data bank may be viewed as a 
collecton of timevarying relations. These relations are of 
assorted degrees. As tme progresses, each nary relaton 
may be subject to insertion of additiona ntuples, deletion 
of existing ones, and alteration of components of any of its 
existing ntupes. 
Voume 13 / Number 6 / June, 1970 
In many commercial, governmenta, and scientific data 
banks, however, some of the reations are of quite high de
gree (a degree of 30 is not at all uncommon). Users should 
not normally be burdened with remembering the domain 
ordering of any relation (for example, the orderng suppier, 
then part then project, then quantity n the relation supply). 
Accordingy we propose that users deal, not with reations 
whch are doman-ordered, but with reationshps which are 
their domain-unordered counterparts2 To accomplsh this, 
domains must be unquely identifiabe at east within any 
gven relation, wthout using poston. Thus where there 
are two or more dentcal domains, we require in each case 
that the domain name be qualified by a distinctve role 
name, which serves to identify the role payed by that 
doman n the gven reation. For example, in the reation 
component of Figure 2, the frst doman part mght be 
qualified by the role name sub, and the second by super, so 
that users could deal with the reationshp component and 
its domains-subpart super.part, quantty-without regard 
to any ordering between these domains. 
To sum up, it is proposed that most users should interact 
with a relational model of the data consisting of a collecton 
of time-varying relationships (rather than reations). Each 
user need not know more about any reationshp than its 
name together with the names of its domains (role quai
fied whenever necessary): Even this information might be 
offered in menu style by the system (subject to security 
and privacy constraints) upon request by the user. 
There are usually many alternative ways in which a re
latona model may be established for a data bank. In 
order to discuss a preferred way (or norma form), we 
must first introduce a few additional concepts (active 
doman, primary key, foreign key, nonsimple domain) 
and establish some links with terminoogy currenty in use 
in information systems programming. In the remainder of 
this paper, we shall not bother to distinguish between re
lations and relationships except where it appears advan
tageous to be expicit. 
Consider an example of a data bank which includes rea
tions concerning parts projects, and suppliers. One rea
tion called part is defined on the following domains: 
(1) part number 
(2) part name 
(3) part color 
(4) part weight 
(5) quantity on hand 
(6) quantity on order 
and possibly other domains as well. Each of these domains 
is, in effect, a pool of values, some or all of which may be 
represented in the data bank at any instant. While it is 
conceivabe that, at some instant, all part colors are pres
ent, it is unkely that all possibe part weights, part 
2 In mathematca terms, a reatonship is an equivalence cass of 
those relatons that are equivalent under permutation of domans 
(see Secton 211). 
* Naturaly, as with any data put nto and retreved from a com
puter system, the user wil normaly make far more effective use 
of the data if he s aware of its meanng. 
values represented at some instant the active domain at that 
instant. 
Normaly, one domain (or combinaton of domains) of a 
given relaton has vaues which uniquely identify each ele
ment (n-tuple) of that relation. Such a domain (or com
binaton) is caled a primary key. In the exampe above, 
part number would be a primary key, while part coor 
would not be. A primary key is nonredundant if it is either 
a simple domain (not a combination) or a combination 
such that none of the participating simple domains is 
superfluous in uniquey identfyng each element. A rela
tion may possess more than one nonredundant prmary 
key. Ths woud be the case in the exampe if different parts 
were always gven distnct names. Whenever a relation 
has two or more nonredundant prmary keys, one of them 
is arbtrarily selected and called the primary key of that re
lation. 
A common requirement is for eements of a reation to 
cross-reference other elements of the same relaton or ele
ments of a different relation. Keys provide a user-oriented 
means (but not the only means) of expressing such cross
references. We shall ca a domain (or domain combma
tion) of relaton R a foreign key if it is not the primary key 
of R but its eements are vaues of the prmary key of some 
relation S (the possibility that S and R are identical is not 
excluded). In the relation supply of Figure 1, the combina
tion of supplier, part, project is the primary key, whie each 
of these three domains taken separately is a foreign key. 
In prevous work there has been a strong tendency to 
treat the data in a data bank as consistng of two parts, one 
part consistng of entity descriptions (for example, descrip
tions of suppliers) and the other part consisting of rela
tions between the varous entities or types of entties (for 
exampe, the supply relation). This distincton is difficult 
to maintain when one may have foreign keys in any rela
tion whatsoever. In the user’s relational model there ap
pears to be no advantage to making such a distinction 
(there may be some advantage, however, when one apples 
relational concepts to machne representations of the user’s 
set of relationships). 
So far, we have discussed examples of reations which are 
defined on simple domains-domains whose elements are 
atomic (nondecomposable) values. Nonatomic vaues can 
be dscussed wthin the relationa framework. Thus, some 
domains may have relations as elements. These relations 
may, in turn, be defined on nonsimple domains, and so on. 
For exampe, one of the domains on which the relation em
ployee is defined might be saary history. An element of the 
saary hstory domain is a binary relaton defined on the do
main date and the domain salary. The salary hstory domain 
is the set of all such bnary reations. At any instant of tme 
there are as many instances of the salary history relaton 
in the data bank as there are employees. In contrast, there 
is ony one instance of the employee relation. 
The terms attribute and repeating group in present data 
base terminology are roughly analogous to simple domain 
380 Communicatons of the ACM and nonsimple doman, respectively Much of the confusion 
If normalization as described above is to be applicable, 
in present terminology is due to faiure to distinguish be
tween type and nstance (as in “record”) and between 
components of a user model of the data on the one hand 
and ther machine representation counterparts on the 
other hand (again, we cite “record” as an exampe). 
1.4. NORMAL FORM 
A relation whose domains are all simple can be repre
sented in storage by a two-dmensional column-homo
geneous array of the knd discussed above. Some more 
complicated data structure is necessary for a relaton with 
one or more nonsimpe domains. For this reason (and others 
to be cited below) the possibility of eliminatng nonsimple 
domains appears worth investigating! There is, in fact, a 
very simple eliminaton procedure, which we shall call 
normalization. 
Consider, for exampe, the collection of relations ex
hibited in Figure 3 (a). Job hstory and children are non
smple domains of the relation employee. Salary history is a 
nonsimple domain of the relaton job hstory. The tree in 
Figure 3 (a) shows just these interrelationships of the non
smple domans. 
empoyee 
I 
jobhstory 
 
salaryhistory 
chidren 
empoyee (man#, name, birthdate, jobhstory, chldren) 
jobhistory (jobdate, ttle, saaryhstory) 
salaryhistory (salarydate, saary) 
children (chldname, birthyear) 
FG. 3(a) Unnormaized set 
empoyee’ (man#, name birthdate) 
jobhstory (man#, jobdate, tite) 
saaryhstory’ (man#, jobdate, salarydate, salary) 
children (man#, chidname birthyear) 
FG. 3(b). Normaized set 
Normalization proceeds as foows. Starting with the re
lation at the top of the tree, take its primary key and ex
pand each of the immediately subordinate relations by 
inserting this primary key domain or domain combination. 
The primary key of each expanded relation consists of the 
primary key before expansion augmented by the primary 
key copied down from the parent relation. Now, strike out 
from the parent relaton all nonsimple domains, remove the 
top node of the tree, and repeat the same sequence of 
operations on each remaining subtree. 
The result of normalizing the collection of relations in 
Figure 3 (a) is the collection in Figure 3 (b). The primary 
key of each reation is italicized to show how such keys 
are expanded by the normalization. 
4 M. E. Sanko of IBM, San Jose ndependently recognzed the 
desrablty of eiminatng nonsimple domains. 
the unnormazed collection of relations must satisfy the 
foowing conditions : 
(1) The graph of interreatonships of the nonsimple 
domains is a coection of trees. 
(2) No primary key has a component domain which is 
nonsmple. 
The writer knows of no application which would require 
any reaxation of these conditions. Further operations of a 
normalizing kind are possible. These are not discussed in 
this paper. 
The simplicity of the array representation which becomes 
feasible when all reations are cast in normal form is not 
only an advantage for storage purposes but also for com
munication of bulk data between systems which use widely 
different representations of the data. The communication 
form would be a suitably compressed version of the array 
representation and would have the followng advantages: 
(1) It would be devoid of pointers (address-valued or 
displacement-valued ) . 
(2) It would avoid all dependence on hash addressng 
schemes. 
(3) It would contain no indices or ordering lists. 
If the user’s relational model is set up in normal form, 
names of items of data in the data bank can take a smpler 
form than would otherwise be the case. A general name 
would take a form such as 
R (g).r.d 
where R is a reational name; g is a generation identifier 
(optiona); r is a role name (optional); d is a domain name. 
Since g is needed only when several generations of a given 
relation exist, or are anticipated to exist, and r is needed 
only when the relation R has two or more domains named 
d, the simple form R.d will often be adequate. 
1.5. SOME LNGUISTIC ASPECTS 
The adoption of a relationa model of data, as described 
above, permits the development of a universal data sub
language based on an applied predicate calculus. A first
order predicate calculus s&ices if the collection of relations 
is in normal form. Such a language would provide a yard
stick of lnguistic power for al other proposed data Ian
guages, and would itself be a strong candidate for embed
ding (with appropriate syntactic modification) in a variety 
of host Ianguages (programmng, command- or problem
oriented). While it is not the purpose of this paper to 
describe such a language in detail, its salient features 
would be as follows. 
Let us denote the data sublanguage by R and the host 
language by H. R permits the declaration of relations and 
their domans. Each declaration of a relation identifies the 
prmary key for that relation. Declared reations are added 
to the system catalog for use by any members of the user 
community who have appropriate authorization. H per
mts supporting declaratons which indicate, perhaps less 
permanently, how these reations are represented in stor
Voume 13 / Number 6 / June, 1970 Commu
e. R permits the specificaton for retrieval of any subset 
of data from the data bank. Action on such a retrieva re
quest is subject to securty constraints. 
The unversalty of the data sublanguage ies in its 
descriptive ability (not its computng abity) In a large 
data bank each subset of the data has a very large number 
of possible (and sensible) descriptions even when we as
sume (as we do) that there is ony a fnite set of function 
subroutines to which the system has access for use n 
qualifyng data for retreval. Thus, the class of qualifcaton 
expressons which can be used in a set specificaton must 
have the descriptive power of the class of wel-formed 
formulas of an applied predicate calculus. It is wel known 
that to preserve this descriptive power t is unnecessary to 
express (in whatever syntax is chosen) every formula of 
the selected predicate calculus. For example, just those n 
prenex normal form are adequate [9]. 
Arthmetc functions may be needed in the qualifcaton 
or other parts of retreval statements. Such functions can 
be defned in H and invoked n R 
A set so specified may be fetched for query purposes 
ony, or it may be held for possible changes Insertions t,ake 
the form of adding new eements to declared reations with
out regard to any orderng that may be present n their 
machine representation. Deletions which are effective for 
the community (as opposed to the ndividual user or sub
communities) take the form of removing eements from de
cared relations. Some deetions and updates may be trig
gered by others, f deetion and update dependencies be
tween specified reations are declared in R. 
One important effect that the view adopted toward data 
has on the language used to retrieve t is in the namng of 
data elements and sets. Some aspects of this have been dis
cussed in the prevous section. With the usual network 
view users wil often be burdened with coining and using 
more reat,on names than are absolutely necessary, snce 
names are associated with paths (or path types) rather 
than wth relations. 
Once a user s aware that a certain reation is stored, he 
wil expect to be able to explot5 it using any combnation 
of its arguments as “knowns” and the remaining argu
ments as “unknowns,” because the informaton (ike 
Everest) is there. This is a system feature (mssing from 
many current informat.ion systems) which we shal call 
(ogcally) symmetric expZoitation of relations. Naturaly, 
symmetry in performance s not to be expected. 
To support symmetric exploitation of a singe binary re
aton, two drected paths are needed. For a relation of de
gree n, the number of paths to be named and controled is 
n factorial. 
Again if a relational view s adopted n which every n
ary relation (n > 2) has to be expressed by the user as a 
nested expression nvolving only binary relatons (see 
Feldman’s LEAP System [lo], for example) then 2n - 1 
names have to be coined nstead of only n + 1 with drect 
n-ary notaton as described n Section 1.2. For example, the 
6 Expoiting a reation ncudes query update, and delete. 
n-ary notation, would be represented in the form 
P (suppler, & (part, R (project, quantity))) 
in nested binary notation and, thus, employ 7 names. 
4 further dsadvantage of this kind of expression is its 
asymmetry. Athough this asymmetry does not prohibit 
symmetric exploitation, it certainly makes some bases of 
interrogation very awkward for the user to express (con
sider, for exampe, a query for those parts and quantities 
related to certain given projects via & and R). 
1.6. EXPRESSBLE, NAMED, AND STORED RELATONS 
Associated with a data bank are two collections of rea
tions: the named set and the expressible set. The named set 
is the collection of all those relations that the community of 
users can identify by means of a simple name (or identifer). 
A relation R acquires membership in the named set when a 
suitably authorized user declares R; it loses membership 
when a suitably authorized user cancels the declaration of 
R. 
The expressibe set is the total coection of relations that 
can be desgnated by expressions in the data language. Such 
expressions are constructed from simple names of relations 
in the named set; names of generatons, roles and domains; 
logcal connectives; the quantifiers of the predicate calcu
1~s;~ and certain constant relation symbols such as = , > . 
The named set is a subset of the expressible set-usually a 
very small subset. 
Since some relations in the named set may be time-inde
pendent combinations of others in that set, it is usefu to 
consider assocatng with the named set a coection of 
statements that define these time-ndependent constraints. 
We shall postpone further dscussion of this unt we have 
introduced several operations on relations (see Section 2). 
One of the major problems confronting the designer of a 
data system which is to support a relational model for its 
users is that of determining the class of stored representa
tons to be supported. Idealy, the variety of permitted 
data representations should be just adequate to cover the 
spectrum of performance requirements of the total co
lection of installations. Too great a varety leads to un
necessary overhead in storage and continual reinterpreta
tion of descriptions for the structures currenty in effect. 
For any selected class of stored representatons the data 
system must provide a means of translating user requests 
expressed in the data language of the relationa model into 
corresponding-and elhcient-actions on the current 
stored representation. For a high level data language this 
presents a challenging design problem. Nevertheess, it is a 
problem which must be solved-as more users obtain con
current access to a large data bank, responsibility for pro
vdng effcient response and throughput shifts from the 
individual user to the data system. 
6 Because each reation n a practical data bank is a fnite set at 
every instant of tme the existentia and universal quantifers 
can be expressed n terms of a function that counts the number of 
elements in any finite set. 
382 Communicatons of the ACM 
edundancy and Consistency 
2.1. OPERATIONS ON RELATONS 
Since relations are sets, all of the usual set operatons are 
appcable to them. Nevertheless, the result may not be a 
relation; for example, the unon of a binary relation and a 
ternary reation is not a relation. 
The operatons discussed below are specifically for rela
tions. These operatons are introduced because of their key 
role in deriving relations from other reations. Their 
principal application is in noninferential information sys
tems-systems which do not provide logcal inference 
services-although their applicability is not necessary 
destroyed when such services are added. 
Most users would not be directly concerned with these 
operations. Information systems designers and people con
cerned with data bank control should, however, be thor
oughly familiar with them. 
2.1.1. Permutation A binary relaton has an array 
representation with two coumns. Interchangng these co
umns yields the converse relation. More generally, if a 
permutation is applied to the columns of an n-ary relation, 
the resulting relation is sad to be a permutation of the 
given relation. There are, for example, 4! = 24 permuta
tons of the relation supply in Fgure 1, if we include the 
identty permutation which leaves the ordering of coumns 
unchanged. 
Since the user’s reational mode consists of a collection 
of relationships (domain-unordered relations), permuta
tion is not relevant to such a model considered in isolation. 
It is, however, relevant to the consideration of stored 
representations of the model. In a system which provides 
symmetric exploitation of reations, the set of queries 
answerable by a stored relation is identical to the set 
answerable by any permutation of that relation. Athough 
it is logically unnecessary to store both a reation and some 
permutation of it, performance considerations coud make 
it advisable. 
2.1.2. Projecton. Suppose now we select certain col
umns of a reation (striking out the others) and then re
move from the resulting array any duplication in the rows. 
The fina array represents a relaton which is sad to be a 
projection of the given relation. 
A selection operator ?r is used to obtain any desired 
permutation, projection, or combination of the two opera
tions. Thus, if L is a list of lc indices7 L = i1 i -  - , ik 
and R is an n-ary relation (n 2 k ), then rrL (R ) is the k-ary 
relation whose jth column is column ii of R (j = 1,2, * * . ,k) 
except that duplication in resulting rows is removed. Con
sider the reation supply of Figure 1. A permuted projection 
of this relation is exhibited in Fgure 4. Note that, in this 
particular case, the projection has fewer n-tuples than the 
relation from which it is derived. 
2.1.3. Jon. Suppose we are given two bnary rela
tions, which have some domain in common. Under what 
circumstances can we combine these reations to form a 
7 When dealng with relatonshps we use domain names (roe
quaifed whenever necessary) instead of doman positons. 
the given reatons? 
The example in Figure 5 shows two reations R, S, which 
are joinable without loss of information, while Figure 6 
shows a join of R with S. A bnary relation R is joinable 
with a binary relaton S if there exists a ternary reation U 
such that 7r12 (U) = R and ‘1~23 (U) = S. Any such ternary 
relation is called a join of R with S. If R, S are binary rela
tons such that ~2 (R) = ~1 (S), then R is jonable with S. 
One join that always exists in such a case is the natural 
join of R with S defined by 
R*S = {(a, b, c):R(a b) A S(b, c)) 
where R (a, b) has the value true if (a, b) is a member of R 
and similarly for S(b, c). It is immediate that 
and 
TB(R*S) = R 
T33(R*S) = S. 
Note that the join shown in Fgure 6 is the natural join 
of R with S from Figure 5. Another join is shown in Figure 
7. 
I31 hPPb/) (project suppler) 
5 1 
5 2 
1 4 
7 2 
FIG. 4 A permuted projecton of the relaton in Figure 1 
R (supplier Part) S (part project) 
1 1 1 1 
2 1 1 2 
2 2 2 1 
FG 5. Two joinable relations 
R*S (suppier part project) 
1 1 1 
1 1 2 
2 1 1 
2 1 2 
2 2 1 
FIG 6. The natural join of R with S (from Fgure 5) 
U (supplier part project) 
1 1 2 
2 1 1 
2 2 1 
FIG 7. Another jon of R with S (from Figure 5) 
Inspection of these relations reveals an element (ele
ment 1) of the domain part (the domain on which the join 
is to be made) with the property that it possesses more 
than one relative under R and also under S. It is this ele
Volume 13 / Number 6 / June, 1970 
